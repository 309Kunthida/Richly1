import { PieChart, Pie, Cell, Tooltip, Legend } from "recharts";
import { useEffect, useState } from "react";
import { Link } from "@inertiajs/react";

// ‚úÖ ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
const COLORS = [
    "#FF6384",
    "#36A2EB",
    "#FFCE56",
    "#4CAF50",
    "#FF9800",
    "#9C27B0",
];

type TransactionSummary = {
    category: string;
    total: number;
    color: string;
};

const Summary = () => {
    const [data, setData] = useState<TransactionSummary[]>([]);
    const [type, setType] = useState<"expense" | "income">("expense"); // ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"

    useEffect(() => {
        fetch(`/api/summary?type=${type}`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
            },
        })
            .then((response) => response.json())
            .then((result) => {
                console.log(`üì• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API (${type}):`, result);

                if (!result || result.length === 0) {
                    console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤!");
                    return;
                }

                // ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü
                const chartData = result.map((item: any, index: number) => ({
                    category: item.category || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                    total: Math.abs(item.total),
                    color: COLORS[index % COLORS.length],
                }));

                setData(chartData);
            })
            .catch((error) => console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error));
    }, [type]); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó

    return (
        <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 p-6">
            {/* ‚úÖ ‡∏Å‡∏£‡∏≠‡∏ö‡∏Ç‡∏≤‡∏ß‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö, Dropdown ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü */}
            <div className="bg-white p-10 rounded-xl shadow-lg w-full max-w-5xl relative">
                {/* üîπ ‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô (‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö + Dropdown) */}
                <div className="flex justify-between items-center mb-6">
                    {/* üîô ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö */}
                    <Link
                        href="/dashboard"
                        className="px-4 py-2 bg-amber-300 text-white rounded-lg shadow-md text-lg font-semibold hover:bg-amber-600 transition duration-300"
                    >
                        üîô
                    </Link>

                    {/* üîΩ Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó */}
                    <div className="flex items-center space-x-3">
                        <label className="text-lg font-bold text-gray-700">
                            ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
                        </label>
                        <div className="relative">
                            <select
                                className="appearance-none border border-gray-300 p-2 rounded-lg bg-white text-gray-700 shadow-md focus:ring-gray-300 focus:border-gray-300 focus:outline-none pr-8"
                                value={type}
                                onChange={(e) =>
                                    setType(
                                        e.target.value as "expense" | "income"
                                    )
                                }
                            >
                                <option value="expense">‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</option>
                                <option value="income">‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö</option>
                            </select>

                            {/* üîΩ ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° Profile */}
                            <div className="absolute inset-y-0 right-2 flex items-center pointer-events-none">
                                <svg
                                    className="h-4 w-4 text-gray-500"
                                    xmlns="http://www.w3.org/2000/svg"
                                    viewBox="0 0 20 20"
                                    fill="currentColor"
                                >
                                    <path
                                        fillRule="evenodd"
                                        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                        clipRule="evenodd"
                                    />
                                </svg>
                            </div>
                        </div>
                    </div>
                </div>

                {/* üîπ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô */}
                <h2 className="text-center text-2xl font-bold mb-6 flex items-center justify-center">
                    {type === "expense" ? "üí∏ ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢" : "üí∞ ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"}
                </h2>

                {/* ‚úÖ ‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏° */}
                <PieChart width={500} height={500} className="mx-auto">
                    <Pie
                        data={data}
                        cx="50%"
                        cy="50%"
                        outerRadius={120}
                        fill="#8884d8"
                        dataKey="total"
                        nameKey="category"
                        label={({ name, value }) => `${name}: ${value}`} // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏õ‡∏Å‡∏ï‡∏¥
                        labelLine={false} // ‚úÖ ‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤‡∏Å‡∏à‡∏≤‡∏Å Label
                    >
                        {data.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                    </Pie>
                    <Tooltip />
                    <Legend />
                </PieChart>
            </div>
        </div>
    );
};

export default Summary;
