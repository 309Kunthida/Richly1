import { useState } from "react";
import { router } from "@inertiajs/react";

const expenseCategories = [
    { id: 1, name: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", icon: "üçî" },
    { id: 2, name: "‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á", icon: "üöó" },
    { id: 3, name: "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢", icon: "üè†" },
    { id: 4, name: "‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ", icon: "üõí" },
];

const incomeCategories = [
    { id: 1, name: "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", icon: "üí∞" },
    { id: 2, name: "‡πÇ‡∏ö‡∏ô‡∏±‡∏™", icon: "üéâ" },
    { id: 3, name: "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à", icon: "üè¢" },
    { id: 4, name: "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß", icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶" },
    { id: 5, name: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ", icon: "üõ†Ô∏è" },
];

const AddTransaction = () => {
    const [amount, setAmount] = useState("");
    const [note, setNote] = useState("");
    const [transactionType, setTransactionType] = useState<"expense" | "income">("expense");
    const [category, setCategory] = useState(expenseCategories[0].id);

    const categories = transactionType === "expense" ? expenseCategories : incomeCategories;

    // ‚úÖ ‡πÉ‡∏ä‡πâ `Function()` ‡πÅ‡∏ó‡∏ô `eval()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const handleCalculate = () => {
        try {
            const result = new Function(`return ${amount}`)();
            if (!isNaN(result)) {
                setAmount(result.toString());
            } else {
                setAmount("Error");
            }
        } catch {
            setAmount("Error");
        }
    };

    const handleKeyPress = (key: string) => {
        if (amount === "Error") setAmount("");

        if (key === "=") {
            handleCalculate();
        } else {
            setAmount((prev) => prev + key);
        }
    };

    const handleDelete = () => {
        setAmount((prev) => prev.slice(0, -1));
    };

    const handleSubmit = async () => {
        console.log("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°...");

        if (!amount || amount === "Error") {
            alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
            return;
        }

        const finalAmount = transactionType === "expense" ? `-${Math.abs(Number(amount))}` : `${Math.abs(Number(amount))}`;

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const transaction_date = new Date().toISOString().slice(0, 19).replace("T", " "); 


        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        const selectedCategory = categories.find((cat) => cat.id === category);
        if (!selectedCategory) {
            alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
            return;
        }

        try {
            const response = await fetch("/transactions", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    "X-CSRF-TOKEN": document.querySelector('meta[name="csrf-token"]')?.getAttribute("content") || "",
                },
                body: JSON.stringify({
                    category_name: selectedCategory.name,
                    amount: finalAmount,
                    transaction_type: transactionType,
                    description: note,
                    transaction_date,
                }),
            });

            const result = await response.json();
            console.log("‚úÖ Response:", result);

            if (response.ok) {
                window.dispatchEvent(new Event("transactionAdded"));
                router.visit("/dashboard"); // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            } else {
                console.error("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", result);
            }
        } catch (error) {
            console.error("‚ùå Error:", error);
        }
    };

    return (
        <div className="min-h-screen bg-amber-50">
            {/* üîπ Navbar ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô */}
            <div className="bg-amber-400 text-white p-4 flex justify-between items-center shadow-md">
                <button onClick={() => history.back()} className="text-xl">‚ùå</button>
                <h2 className="text-lg font-semibold">{transactionType === "expense" ? "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"}</h2>
                <button onClick={handleSubmit} className="text-xl">‚úîÔ∏è</button>
            </div>

            {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢/‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö */}
            <div className="flex justify-center mt-4">
                <button
                    onClick={() => setTransactionType("income")}
                    className={`px-4 py-2 mx-2 rounded-lg shadow-md text-lg font-semibold ${transactionType === "income" ? "bg-green-400 text-white" : "bg-gray-200 text-gray-700"}`}
                >
                    ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö üí∞
                </button>
                <button
                    onClick={() => setTransactionType("expense")}
                    className={`px-4 py-2 mx-2 rounded-lg shadow-md text-lg font-semibold ${transactionType === "expense" ? "bg-red-400 text-white" : "bg-gray-200 text-gray-700"}`}
                >
                    ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ üí∏
                </button>
            </div>

            {/* üîπ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà */}
            <div className="bg-white p-4 rounded-lg shadow-lg mx-4 mt-4">
                <h3 className="text-lg font-semibold text-gray-700 mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</h3>
                <div className="grid grid-cols-4 gap-4">
                    {categories.map((cat) => (
                        <button
                            key={cat.id}
                            onClick={() => setCategory(cat.id)}
                            className={`p-3 rounded-lg shadow-md text-center ${category === cat.id ? "bg-amber-400 text-white" : "bg-gray-100 text-gray-700 hover:bg-amber-100"}`}
                        >
                            <span className="text-2xl">{cat.icon}</span>
                            <p className="text-sm mt-1">{cat.name}</p>
                        </button>
                    ))}
                </div>
            </div>

            {/* üîπ ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
            <div className="bg-white p-4 rounded-lg shadow-lg mx-4 mt-4">
                <h3 className="text-lg font-semibold text-gray-700 mb-2">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</h3>
                <input type="text" value={amount} readOnly className="w-full p-4 text-3xl text-center bg-amber-100 rounded-lg" placeholder="‡∏ø0.00" />
                <input type="text" value={note} onChange={(e) => setNote(e.target.value)} className="w-full p-4 text-lg bg-amber-100 rounded-lg mt-2" placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..." />
            </div>

            {/* üîπ ‡∏Ñ‡∏µ‡∏¢‡πå‡πÅ‡∏û‡∏î & ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
            <div className="bg-amber-200 text-black p-6 mt-6 rounded-t-lg shadow-lg">
                <div className="grid grid-cols-4 gap-3 mt-4">
                    {["7", "8", "9", "+", "4", "5", "6", "-", "1", "2", "3", "*", ".", "0", "=", "/"].map((key) => (
                        <button key={key} onClick={() => handleKeyPress(key)} className="p-4 rounded-lg text-2xl font-semibold bg-amber-100 hover:bg-amber-400">
                            {key}
                        </button>
                    ))}
                </div>

                <div className="grid grid-cols-2 gap-3 mt-3">
                    <button onClick={handleDelete} className="p-4 rounded-lg text-2xl font-semibold bg-red-500 hover:bg-red-600 text-white">‚Üê ‡∏•‡∏ö</button>
                    <button onClick={handleSubmit} className="p-4 rounded-lg text-2xl font-semibold bg-green-500 hover:bg-green-600 text-white">‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                </div>
            </div>
        </div>
    );
};

export default AddTransaction;
